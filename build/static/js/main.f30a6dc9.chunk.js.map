{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","react_default","a","createElement","content","Notification","message","className","baseUrl","notes","getAll","request","axios","get","nonExisting","id","date","important","then","response","data","concat","create","newObject","post","update","put","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleVisible","setState","showAll","state","addNote","event","preventDefault","noteObject","newNote","Date","Math","random","noteService","toggleImportanceOf","find","n","changedNote","objectSpread","map","catch","error","filter","setTimeout","handleNoteChange","console","log","target","value","_this2","_this3","notesToShow","label","components_Notification","onClick","components_Note","key","toggleImportance","onSubmit","onChange","type","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f30a6dc9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n//pienissä sovelluksissa komponentit ovat omassa src kansiossa\r\nconst Note = ({ note }) => {\r\n    return(\r\n        <li>{note.content}</li>\r\n    )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/notes'\r\n\r\nconst getAll2 = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'Tätä muistiinpanoa ei ole palvelimelta',\r\n    date: '2017-12-10T17:30:31.098Z',\r\n    important: true\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { Component } from 'react';\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n//import axios from 'axios'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      notes: [],\n      newNote: '',\n      showAll: true,\n      error: null\n    }\n  }\n\n  toggleVisible = () => {\n    this.setState({ showAll: !this.state.showAll })\n  }\n\n  addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: this.state.newNote,\n      date: new Date(),\n      important: Math.random() > 0.5\n    }\n\n    noteService\n    .create(noteObject)\n    .then(newNote => {\n      this.setState({\n        notes: this.state.notes.concat(newNote),\n        newNote: ''\n      })\n    })\n}\n/*toggleImportanceOf = (id) => {\n  return () => {\n    const note = this.state.notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(changedNote => {\n        this.setState({\n          notes: this.state.notes.map(note => note.id !== id ? note : changedNote)\n        })\n      })\n      .catch(error => {\n        //alert(`muistiinpano '${note.content}' on jo valitettavasti poistettu palvelimelta`)\n        //this.setState({ notes: this.state.notes.filter(n => n.id !== id) })\n        error: `muistiinpano '${note.content}' on jo valitettavasti poistettu palvelimelta`,\n        notes: this.state.notes.filter(n => n.id !== id)\n      })\n      setTimeout(() => {\n        this.setState({ error: null })\n      }, 50000)\n    })\n  }\n}*/\ntoggleImportanceOf = (id) => {\n  return () => {\n    const note = this.state.notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(changedNote => {\n        this.setState({\n          notes: this.state.notes.map(note => note.id !== id ? note : changedNote)\n        })\n      })\n      .catch(error => {\n        this.setState({\n          error: `muistiinpano '${note.content}' on jo valitettavasti poistettu palvelimelta`,\n          notes: this.state.notes.filter(n => n.id !== id)\n        })\n        setTimeout(() => {\n          this.setState({ error: null })\n        }, 50000)\n      })\n  }\n}\n   /* axios\n    .post('http://localhost:3001/notes', noteObject)\n    .then(response => {\n      this.setState({\n        notes: this.state.notes.concat(response.data),\n        newNote: ''\n      })\n    })\n}*/\n/*componentWillMount() {\n  console.log('will mount')\n  axios\n    .get('http://localhost:3001/notes')\n    .then(response => {\n      console.log('promise fulfilled')\n      this.setState({ notes: response.data })\n    })\n}*/\ncomponentWillMount() {\n  noteService\n    .getAll()\n    .then(notes => {\n      this.setState({ notes })\n    })\n}\n\n\nhandleNoteChange = (event) => {\n  console.log(event.target.value)\n  this.setState({ newNote: event.target.value })\n}\n\n    //const notes = this.state.notes.concat(noteObject)\n\n    /*this.setState({\n      notes,\n      newNote: ''\n    })\n  }*/\n/*const eventHandler = (response) => {\n  console.log('promise fulfilled')\n  this.setState({ notes: response.data })\n}\n\nconst promise = axios.get('http://localhost:3001/notes')\n\npromise.then(eventHandler) */\n  //hakee datan axiosin avulla\n /* componentWillMount() {\n    console.log('will mount')\n    axios\n      .get('http://localhost:3001/notes')\n      .then(response => {\n        console.log('promise fulfilled')\n        this.setState({ notes: response.data })\n      })\n  }*/\n\n\n\n  render() {\n    const notesToShow =\n      this.state.showAll ?\n        this.state.notes :\n        this.state.notes.filter(note => note.important === true)\n\n    const label = this.state.showAll ? 'vain tärkeät' : 'kaikki'\n\n    return (\n      <div>\n        <h1>Muistiinpanot</h1>\n        <Notification message={this.state.error} />\n        <div>\n        <li className=\"note\">  <button onClick={this.toggleVisible}>\n            näytä {label}\n          </button> </li>\n        </div>\n        <ul>\n          {notesToShow.map(note => <Note \n          key={note.id} \n          note={note} \n          toggleImportance={this.toggleImportanceOf(note.id)}/>)}\n        </ul>\n        <form onSubmit={this.addNote}>\n          <input \n            value={this.state.newNote} \n            onChange={this.handleNoteChange}\n          />\n          <button type=\"submit\">tallenna</button>\n        </form>\n      </div>\n    )\n  }\n}\n\n/*  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n  }\n*/\n  /*//metodit\n  kasvataYhdella() {\n    this.setState({ counter: this.state.counter + 1 })\n  }\n\n  nollaa() {\n    this.setState({ counter: 0 })\n  }*/\n\n  /*asetaArvoon = (arvo) => {\n    return () => {\n      this.setState({ counter: arvo })\n    }\n  }\n\n//tapahtumakäsittelijä esim klikkaukseen\n  render() {\n    return (\n      <div>\n        <div>{this.state.counter}</div>\n     <div>*/\n          //{/*bind taktiikka  */}\n         //{/* <button onClick={this.kasvataYhdella.bind(this)}>\n           /* plus\n          </button>\n          <button onClick={this.nollaa.bind(this)}>\n            zero\n    </button>*/ //}\n    /*<button onClick={this.asetaArvoon(this.state.counter + 1)}>\n            Plus\n          </button>\n          <button onClick={this.asetaArvoon(0)}>\n            Zero\n          </button>\n    </div>*/\n      //{/*  <button onClick={() => this.setState({counter: this.state.counter +1})}>\n        /*  plus\n    </button> \n        <button onClick={() => this.setState({counter: 0})}>\n        zero*/\n   // </button> */}\n    /*\n    \n    \n    \n    \n    \n      </div>\n    )\n  }\n}\n*/\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\n//import SinglePageApp from './SinglePageApp';\n//import App5 from './App5'\n// ./ on samassa hakemistossa ../ on yksi taaksepäin hakemistossa\n//import Note from './components/Note'\n//import App from \"./App\";\n//import axios from 'axios'\n//import * as serviceWorker from './serviceWorker';\n\n/*const App = () => {\n    \n    const now = new Date()\n    const a = 10\n    const b = 20\n    return (\n      <div>\n          <h1>Tervetuloa pizzeriaan</h1>\n        <p>Hello world, it is {now.toString()}</p>\n        <p>{a} plus {b} is {a + b}</p>\n      </div>\n    )\n  }\n*/\n\n//komponentti Hello, huom. alkaa isolla kirjaimella\n//props tiedonvälitys lähettää merkkijonon\n/*const Hello = (props) => {\n    return (\n      <div>\n        <p>Hello {props.name}, you are {props.age} years old</p>\n      </div>\n    )\n  }*/\n\n  //luokka syntaksi\n  //komponentti määritellään luokaksi, joka perii react.component luokan\n \n //POISTA MUISTIIN PANOT jos haluut toimimaan\n /* class Hello extends React.Component {\n       //render palauttaa React elementit eli JSX:N\n    render() {\n      //render sisäinen apumetodi\n      */\n   /*   const bornYear= () =>{\n          //metodeja ja oliomuuttujia\n          const yearNow = new Date().getFullYear()\n          return yearNow - this.props.age\n      }\n     */\n\n     //yksinkertaisemmaksi\n     /*const name = this.props.name\n  const age = this.props.age\n  const bornYear = () => new Date().getFullYear() - age\n   \n      return (\n        <div>\n          <p>Hello {name}, you are {age} years old <br />\n          So you were probably born {bornYear()} \n          </p>\n        \n        </div>//bornyear kutsutaan tässä tapauksessa ilman this.bornYear koska se on renderin sisällä \n        //sama myös name ja age ilma this.props.name\n      )\n    }\n  }*/\n\n  //kovakoodattu arvo esim. Arto\n  //poista const jos haluut tän toimimaan\n  /*const App = () => {\n      const nimi = 'Pekka'\n      const ika = 10\n    return (\n      <div>\n        <h1>Greetings</h1>\n        <Hello  name=\"Arto\" age={20+11} />\n        <Hello  name={nimi} age={ika}/>\n      </div>\n    )\n  }\n*/\n/*const notes = [\n  {\n    id: 1,\n    content: 'HTML on helppoa',\n    date: '2017-12-10T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Selain pystyy suorittamaan vain javascriptiä',\n    date: '2017-12-10T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'HTTP-protokollan tärkeimmät metodit ovat GET ja POST',\n    date: '2017-12-10T19:20:14.298Z',\n    important: true\n  }\n]\n*/\n/*axios.get('http://localhost:3001/notes').then(response => {\n  const notes = response.data\n*/\n/*const Note = ({ note }) => {\n  return (\n    <li>{note.content}</li>\n  )\n}*/\n\n//const App = ({notes}) => {\n  //const { notes } = props;\n // const rivit = () => notes.map(note => <li key={note.id}>{note.content}</li>)\n  //const result = notes.map(note => note.id)\n  //console.log(result)\n  //return (\n    //<div>\n      //<h1>Muistiinpanot</h1>\n      //<ul>\n       {/* <li>{notes[0].content}</li>\n        <li>{notes[1].content}</li>\n  <li>{notes[2].content}</li>\n       {rivit()}*/}\n       //{notes.map(note=><Note key={note.id} note={note}/>)}\n      //</ul>\n    //</div>\n // )\n//}\n/*Tiedosto index.js määrittelee nyt React-komponentin nimeltään App ja viimeisen rivin komento\n\nReactDOM.render(<App />, document.getElementById('root'))\nrenderöi komponentin sisällön tiedoston public/index.html määrittelemään div-elementtiin, jonka id:n arvona on ‘root’*/\n\n//ReactDOM.render(<App5 />, document.getElementById('root'));\n/*class App extends React.Component {\n  constructor(props) {\n      super(props)\n      this.state = {\n          notes: props.notes,\n          newNote: '',\n          showAll: true\n      }\n      console.log('constructor');\n      \n  }\n\n  //tapahtumakäsittelijä\n  /*addNote = (event) => {\n      //estää sivun uudelleenlatautumisen\n      event.preventDefault()\n      const noteObject = {\n        content: this.state.newNote,\n        date: new Date().toISOString(),\n        important: Math.random() > 0.5,\n        id: this.state.notes.length + 1\n      }\n      //concat metodi\n      //Uusi muistiinpano lisätään vanhojen joukkoon oikeaoppisesti\n      const notes = this.state.notes.concat(noteObject)\n      this.setState({\n        notes: notes,\n        newNote: ''\n      })\n      \n  }*/\n\n  //synkronoi syötekenttään tehdyt muutokset\n  /*handleNoteChange = (event) => {\n    //target menee imput kenttään\n    //event target value inputin syötekentän arvo\n    console.log(event.target.value)\n    this.setState({ newNote: event.target.value })\n  }\n  //tapahtumakäsittelijä\n  toggleVisible = () => {\n    this.setState({showAll: !this.state.showAll})\n  }*/\n  /*componentDidMount() {\n    console.log('did mount')\n    axios\n      .get('http://localhost:3001/notes')\n      .then(response => {\n        console.log('promise fulfilled')\n        this.setState({ notes: response.data })\n      })\n  }\n\n  render(){\n    console.log('render');\n    \n    /*const notesToShow =\n      this.state.showAll ?\n        this.state.notes :\n        //filteröinti ehto ? val1 :val2 \n        this.state.notes.filter(note => note.important === true)\n\n        const label = this.state.showAll ? 'vain tärkeät' : 'kaikki'\n      return (\n          <div>\n              <h1>Muistiinpanot</h1>\n              <div>\n                <button onClick={this.toggleVisible}>\n                näytä {label}\n                </button>\n              </div>\n              <ul>\n                  {/*this.state.notes.map(note => <Note key={note.id} note={note} />)*///}\n                 // {/*{notesToShow.map(note => <Note key={note.id} note={note} />)*/}\n              \n              \n                  /*</ul>\n              <form onSubmit={this.addNote}>\n                  <input \n                  value={this.state.newNote}\n                  onChange={this.handleNoteChange}\n                  />\n                  <button type=\"submit\">tallenna</button>\n              </form>\n          </div>\n      )\n  }*/\n//}\n/*ReactDOM.render(\n <App notes={notes} />,\n  document.getElementById('root')\n)*/\n\n//muutetaan sovellus webpalvelimeksi\n\nconsole.log('hello world')\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n/*serviceWorker.unregister();\n})*/"],"sourceRoot":""}